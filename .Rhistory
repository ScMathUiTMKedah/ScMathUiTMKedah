$$
$
$ a &= 6 $
library(haven)
data_for_anaysis <- read_sav("D:/SP Intelect Resources/Analisis/Logistics Regression/data for anaysis.sav")
View(data_for_anaysis)
traindata <- data_for_anaysis[1:544,]
testdata <- data_for_anaysis[544:680,]
fix(data_for_anaysis)
fix()
fix()
View(data_for_anaysis)
library(haven)
data_for_anaysis <- read_sav("D:/SP Intelect Resources/Analisis/Logistics Regression/data for anaysis.sav")
View(data_for_anaysis)
str(data_for_anaysis)
lrmodel<- glm(YN ~ H1BOD + H2INED + + H3DUAL + H4MEET + H5FAM + H6INST + H7FOR + H8SUB +
H9aDIR + H10aFCFSh + H11DEBTASSET + H12aMV + H13aDPS + H14ROA + H15ROE +
H16PTBV + H17AF_Log + H18NAF_Log + B19TAsset,
family=binomial(link='logit'),data=traindata)
summary(lrmodel)
lrmodel2<- glm(YN ~ H1BOD + H2INED + + H3DUAL + H4MEET + H5FAM + H6INST + H7FOR + H8SUB +
H9aDIR + H10aFCFSh + H11DEBTASSET + H12aMV + H13aDPS + H14ROA + H15ROE +
H16PTBV + H17AF_Log + H18NAF_Log, family=binomial(link='logit'),data=traindata)
summary(lrmodel2)
anova(lrmodel1, test="”Chisq”")
anova(lrmodel, test="”Chisq”")
anova(lrmodel, test="Chisq")
anova(lrmodel2, test="Chisq”")
anova(lrmodel2, test="Chisq")
setwd("G:/Learn R/Create Custome PPT Template")
install.packages("remotes")
remotes::install_github("datalorax/slidex")
library(remotes)
remotes::install_github("datalorax/slidex")
library(devtools)
devtools::install_github("datalorax/slidex")
install.packages("spellcheckr")
install.packages("spelling")
install.packages("here")
setwd("D:/R/R Project")
install.packages("blogdown")
library(bookdown)
reticulate::repl_python()
import pandas as pd
reticulate::repl_python()
x <- c(15,21,25,18,14,10,12,8,9,12)
x
mean(x)
median(x)
frequency(x)
stem(x)
summary(x)
str(x)
glimpse
var(x)
sqrt(var(x))
table(x)
tabulate(x)
order(x)
sort(x)
sort(x, decreasing = TRUE)
boxplot(x)
y <- c(0,1,2,3,4)
wt.y <- c(61,53,23,109,4)/250
mean(y, wt.y)
weighted.mean(y, wt.y)
table(y,wt.y)
weighted.residuals(y, wt.y)
reticulate::repl_python()
pip install reticulate
pip install pandas
install.packages("reticulate")
install.packages("reticulate")
install.packages("reticulate")
install.packages("reticulate")
reticulate::repl_python()
import numpy as np
import pandas as pd
a = (3,5,7,4,8,5,10)
print(a)
b = [1,2,3,4,5,6,7,8,9,0]
print(b)
pd.mean(a)
x <- c(9.77,11.35,12.46,13.80,15.47,17.48,18.37,18.47,18.61,20.72,21.49,22.47,31.50,38.16)
x
median(x)
summary(x)
boxplot(x)
setwd("D:/R/Training")
# Install R libraries
if(!require(readr)) install.packages("readr")
if(!require(dplyr)) install.packages("dplyr")
if(!require(DT)) install.packages("DT")
if(!require(ggrepel)) install.packages("ggrepel")
if(!require(leaflet)) install.packages("leaflet")
library(readr)
path <- "http://spatial.binghamton.edu/projects/crime/data/SF_Crime_2007_2016.csv"
# path <- "D:\\Data\\Crime\\SF_Crime_2007_2016.csv"
df <- read_csv(path)
# path <- "http://spatial.binghamton.edu/projects/crime/data/SF_Crime_2007_2016.csv"
# path <- "D:\\Data\\Crime\\SF_Crime_2007_2016.csv"
# df <- read_csv(path)
df <- read_csv("crime data.csv")
library(DT)
df_sub <- df[1:100,]  # display the first 100 rows
df_sub$Time <- as.character(df_sub$Time)
datatable(df_sub, options = list(pageLength = 5,scrollX='400px'))
sprintf("Number of Rows in Dataframe: %s", format(nrow(df),big.mark = ","))
# str(df)
proper_case <- function(x) {
return (gsub("\\b([A-Z])([A-Z]+)", "\\U\\1\\L\\2" , x, perl=TRUE))
}
library(dplyr)
df <- df %>% mutate(Category = proper_case(Category),
Descript = proper_case(Descript),
PdDistrict = proper_case(PdDistrict),
Resolution = proper_case(Resolution),
Time = as.character(Time))
df_sub <- df[1:100,]  # display the first 100 rows
datatable(df_sub, options = list(pageLength = 5,scrollX='400px'))
if(!require(readr)) install.packages("readr")
if(!require(dplyr)) install.packages("dplyr")
if(!require(DT)) install.packages("DT")
if(!require(ggrepel)) install.packages("ggrepel")
if(!require(leaflet)) install.packages("leaflet")
# path <- "http://spatial.binghamton.edu/projects/crime/data/SF_Crime_2007_2016.csv"
# path <- "D:\\Data\\Crime\\SF_Crime_2007_2016.csv"
# df <- read_csv(path)
df <- read_csv("crime data.csv")
library(DT)
df_sub <- df[1:100,]  # display the first 100 rows
df_sub$Time <- as.character(df_sub$Time)
datatable(df_sub, options = list(pageLength = 5,scrollX='400px'))
sprintf("Number of Rows in Dataframe: %s", format(nrow(df),big.mark = ","))
# str(df)
proper_case <- function(x) {
return (gsub("\\b([A-Z])([A-Z]+)", "\\U\\1\\L\\2" , x, perl=TRUE))
}
library(dplyr)
df <- df %>% mutate(Category = proper_case(Category),
Descript = proper_case(Descript),
PdDistrict = proper_case(PdDistrict),
Resolution = proper_case(Resolution),
Time = as.character(Time))
df_sub <- df[1:100,]  # display the first 100 rows
datatable(df_sub, options = list(pageLength = 5,scrollX='400px'))
library(leaflet)
data <- df[1:10000,] # display the first 10,000 rows
data$popup <- paste("<b>Incident #: </b>", data$IncidntNum, "<br>", "<b>Category: </b>", data$Category,
"<br>", "<b>Description: </b>", data$Descript,
"<br>", "<b>Day of week: </b>", data$DayOfWeek,
"<br>", "<b>Date: </b>", data$Date,
"<br>", "<b>Time: </b>", data$Time,
"<br>", "<b>PD district: </b>", data$PdDistrict,
"<br>", "<b>Resolution: </b>", data$Resolution,
"<br>", "<b>Address: </b>", data$Address,
"<br>", "<b>Longitude: </b>", data$X,
"<br>", "<b>Latitude: </b>", data$Y)
leaflet(data, width = "100%") %>% addTiles() %>%
addTiles(group = "OSM (default)") %>%
addProviderTiles(provider = "Esri.WorldStreetMap",group = "World StreetMap") %>%
addProviderTiles(provider = "Esri.WorldImagery",group = "World Imagery") %>%
# addProviderTiles(provider = "NASAGIBS.ViirsEarthAtNight2012",group = "Nighttime Imagery") %>%
addMarkers(lng = ~X, lat = ~Y, popup = data$popup, clusterOptions = markerClusterOptions()) %>%
addLayersControl(
baseGroups = c("OSM (default)","World StreetMap", "World Imagery"),
options = layersControlOptions(collapsed = FALSE)
)
df_category <- sort(table(df$Category),decreasing = TRUE)
df_category <- data.frame(df_category[df_category > 10000])
colnames(df_category) <- c("Category", "Frequency")
df_category$Percentage <- df_category$Frequency / sum(df_category$Frequency)
datatable(df_category, options = list(scrollX='400px'))
library(ggplot2)
library(ggrepel)
bp<-ggplot(df_category, aes(x=Category, y=Frequency, fill=Category)) + geom_bar(stat="identity") +
theme(axis.text.x=element_blank()) + geom_text_repel(data=df_category, aes(label=Category))
bp
bp<-ggplot(df_category, aes(x="", y=Percentage, fill=Category)) + geom_bar(stat="identity")
pie <- bp + coord_polar("y")
pie
df_theft <- df %>% filter(grepl("Larceny/Theft", Category))
df_theft_daily <- df_theft %>%
mutate(Date = as.Date(Date, "%m/%d/%Y")) %>%
group_by(Date) %>%
summarize(count = n()) %>%
arrange(Date)
library(ggplot2)
library(scales)
plot <- ggplot(df_theft_daily, aes(x = Date, y = count)) +
geom_line(color = "#F2CA27", size = 0.1) +
geom_smooth(color = "#1A1A1A") +
# fte_theme() +
scale_x_date(breaks = date_breaks("1 year"), labels = date_format("%Y")) +
labs(x = "Date of Theft", y = "Number of Thefts", title = "Daily Thefts in San Francisco from 2007 – 2016")
plot
get_hour <- function(x) {
return (as.numeric(strsplit(x,":")[[1]][1]))
}
df_theft_time <- df_theft %>%
mutate(Hour = sapply(Time, get_hour)) %>%
group_by(DayOfWeek, Hour) %>%
summarize(count = n())
# df_theft_time %>% head(10)
datatable(df_theft_time, options = list(scrollX='400px'))
library(gapminder)
library(tidyverse)
gapminder %>%
select(country, pop, year, continent) %>%
# for each year we assign a rank
group_by(year) %>%
arrange(year, -pop) %>%
# assign ranking
mutate(rank = 1:n()) %>%
filter(rank <= 10) ->
ranked_by_year
my_theme <- theme_classic(base_family = "Times") +
theme(axis.text.y = element_blank()) +
theme(axis.ticks.y = element_blank()) +
theme(axis.line.y = element_blank()) +
theme(legend.background = element_rect(fill = "gainsboro")) +
theme(plot.background = element_rect(fill = "gainsboro")) +
theme(panel.background = element_rect(fill = "gainsboro"))
# Static Plot
ranked_by_year %>%
ggplot() +
aes(xmin = 0 ,
xmax = pop / 1000000) +
aes(ymin = rank - .45,
ymax = rank + .45,
y = rank) +
facet_wrap(~ year) +
geom_rect(alpha = .7) +
aes(fill = continent) +
scale_fill_viridis_d(option = "magma",
direction = -1) +
scale_x_continuous(
limits = c(-800, 1400),
breaks = c(0, 400, 800, 1200)) +
geom_text(col = "gray13",
hjust = "right",
aes(label = country),
x = -50) +
scale_y_reverse() +
labs(fill = NULL) +
labs(x = 'Population (millions)') +
labs(y = "") +
my_theme ->
my_plot
# Set up the animation
library(gganimate)
my_plot +
facet_null() +
scale_x_continuous(
limits = c(-355, 1400),
breaks = c(0, 400, 800, 1200)) +
geom_text(x = 1000 , y = -10,
family = "Times",
aes(label = as.character(year)),
size = 30, col = "grey18") +
aes(group = country) +
gganimate::transition_time(year)
library(gapminder)
library(tidyverse)
gapminder %>%
select(country, pop, year, continent) %>%
# for each year we assign a rank
group_by(year) %>%
arrange(year, -pop) %>%
# assign ranking
mutate(rank = 1:n()) %>%
filter(rank <= 10) ->
ranked_by_year
my_theme <- theme_classic(base_family = "Times") +
theme(axis.text.y = element_blank()) +
theme(axis.ticks.y = element_blank()) +
theme(axis.line.y = element_blank()) +
theme(legend.background = element_rect(fill = "gainsboro")) +
theme(plot.background = element_rect(fill = "gainsboro")) +
theme(panel.background = element_rect(fill = "gainsboro"))
# Static Plot
ranked_by_year %>%
ggplot() +
aes(xmin = 0 ,
xmax = pop / 1000000) +
aes(ymin = rank - .45,
ymax = rank + .45,
y = rank) +
facet_wrap(~ year) +
geom_rect(alpha = .7) +
aes(fill = continent) +
scale_fill_viridis_d(option = "magma",
direction = -1) +
scale_x_continuous(
limits = c(-800, 1400),
breaks = c(0, 400, 800, 1200)) +
geom_text(col = "gray13",
hjust = "right",
aes(label = country),
x = -50) +
scale_y_reverse() +
labs(fill = NULL) +
labs(x = 'Population (millions)') +
labs(y = "") +
my_theme ->
my_plot
# Set up the animation
library(gganimate)
# options(gganimate.nframes = 20)
my_plot +
facet_null() +
scale_x_continuous(
limits = c(-355, 1400),
breaks = c(0, 400, 800, 1200)) +
geom_text(x = 1000 , y = -10,
family = "Times",
aes(label = as.character(year)),
size = 30, col = "grey18") +
aes(group = country) +
gganimate::transition_time(year)
library(gapminder)
library(tidyverse)
gapminder %>%
select(country, pop, year, continent) %>%
# for each year we assign a rank
group_by(year) %>%
arrange(year, -pop) %>%
# assign ranking
mutate(rank = 1:n()) %>%
filter(rank <= 10) ->
ranked_by_year
my_theme <- theme_classic(base_family = "Times") +
theme(axis.text.y = element_blank()) +
theme(axis.ticks.y = element_blank()) +
theme(axis.line.y = element_blank()) +
theme(legend.background = element_rect(fill = "gainsboro")) +
theme(plot.background = element_rect(fill = "gainsboro")) +
theme(panel.background = element_rect(fill = "gainsboro"))
my_theme
# Static Plot
ranked_by_year %>%
ggplot() +
aes(xmin = 0 ,
xmax = pop / 1000000) +
aes(ymin = rank - .45,
ymax = rank + .45,
y = rank) +
facet_wrap(~ year) +
geom_rect(alpha = .7) +
aes(fill = continent) +
scale_fill_viridis_d(option = "magma",
direction = -1) +
scale_x_continuous(
limits = c(-800, 1400),
breaks = c(0, 400, 800, 1200)) +
geom_text(col = "gray13",
hjust = "right",
aes(label = country),
x = -50) +
scale_y_reverse() +
labs(fill = NULL) +
labs(x = 'Population (millions)') +
labs(y = "") +
my_theme ->
my_plot
my_plot
my_plot +
facet_null() +
scale_x_continuous(
limits = c(-355, 1400),
breaks = c(0, 400, 800, 1200)) +
geom_text(x = 1000 , y = -10,
family = "Times",
aes(label = as.character(year)),
size = 30, col = "grey18") +
aes(group = country) +
gganimate::transition_time(year)
my_animate <-
my_plot +
facet_null() +
scale_x_continuous(
limits = c(-355, 1400),
breaks = c(0, 400, 800, 1200)) +
geom_text(x = 1000 , y = -10,
family = "Times",
aes(label = as.character(year)),
size = 30, col = "grey18") +
aes(group = country) +
gganimate::transition_time(year)
my_animate
library(devtools)
devtools::install_github("walkerke/bsselectR")
knitr::opts_chunk$set(echo = FALSE)
# Learn more about creating websites with Distill at:
# https://rstudio.github.io/distill/website.html
library(stringr)
library(bsselectR)
tt_plots <- paste0(list.files("image00001", full.names = TRUE))
names(tt_plots) <- str_replace_all(tt_plots,
c("\\.jpeg" = "",
"images/tt/" = ""))
bsselect(state_plots, type = "img", selected = "image00001",
live_search = TRUE, show_tick = TRUE)
library(stringr)
library(bsselectR)
tt_plots <- paste0(list.files("image00001", full.names = TRUE))
names(tt_plots) <- str_replace_all(tt_plots,
c("\\.jpeg" = "",
"images/tt/" = ""))
bsselect(tt_plots, type = "img", selected = "image00001",
live_search = TRUE, show_tick = TRUE)
library(stringr)
library(bsselectR)
tt_plots <- paste0(list.files("image", full.names = TRUE))
names(tt_plots) <- str_replace_all(tt_plots,
c("\\.jpeg" = "",
"images/tt/" = ""))
bsselect(tt_plots, type = "img", selected = "image00001",
live_search = TRUE, show_tick = TRUE)
library(stringr)
library(bsselectR)
tt_plots <- paste0(list.files("image", full.names = TRUE))
names(tt_plots) <- str_replace_all(tt_plots,
c("\\.jpeg" = "",
"images/tt/" = ""))
bsselect(tt_plots, type = "img", selected = "image",
live_search = TRUE, show_tick = TRUE)
library(stringr)
library(bsselectR)
tt_plots <- paste0(list.files("images/tt", full.names = TRUE))
names(tt_plots) <- str_replace_all(tt_plots,
c("\\.jpeg" = "",
"images/tt/" = ""))
bsselect(tt_plots, type = "img", selected = "image",
live_search = TRUE, show_tick = TRUE)
library(stringr)
library(bsselectR)
tt_plots <- paste0(list.files("images/tt", full.names = TRUE))
names(tt_plots) <- str_replace_all(tt_plots,
c("\\.jpg" = "",
"images/tt/" = ""))
bsselect(tt_plots, type = "img", selected = "asmahani",
live_search = TRUE, show_tick = TRUE)
install.packages("vitae")
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
library(vitae)
tribble(
~Year, ~Type, ~Desc,
1903, "Physics", "Awarded for her work on radioactivity with Pierre Curie and Henri Becquerel",
1911, "Chemistry", "Awarded for the discovery of radium and polonium"
) %>%
brief_entries(
glue::glue("Nobel Prize in {Type}"),
Year,
Desc
)
library(dplyr)
knitr::write_bib(c("vitae", "tibble"), "packages.bib")
bibliography_entries("packages.bib") %>%
arrange(desc(author$family), issued)
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
library(vitae)
library(tibble)
tribble(
~ Degree, ~ Year, ~ Institution, ~ Where,
"Informal studies", "1889-91", "Flying University", "Warsaw, Poland",
"Master of Physics", "1893", "Sorbonne Université", "Paris, France",
"Master of Mathematics", "1894", "Sorbonne Université", "Paris, France"
) %>%
detailed_entries(Degree, Year, Institution, Where)
tribble(
~Year, ~Type, ~Desc,
1903, "Physics", "Awarded for her work on radioactivity with Pierre Curie and Henri Becquerel",
1911, "Chemistry", "Awarded for the discovery of radium and polonium"
) %>%
brief_entries(
glue::glue("Nobel Prize in {Type}"),
Year,
Desc
)
update.packages("tinytex")
install.packages("tinytex")
install.packages("pagedown")
devtools::install_github("nstrayer/datadrivencv")
install.packages("ICON")
devtools::install_github("nstrayer/datadrivencv")
devtools::install_github("nstrayer/datadrivencv")
setwd("D:/R/R Project/CV")
